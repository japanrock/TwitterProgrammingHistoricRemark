0:
 contents: 優れたコードは書き換えやすい。まずいコードは少しずつ書き換えやすくしていけるだけである。 by リファクタリング：Rubyエディション 
 url: http://amzn.to/audtNq
1:
 contents: インタープリタは、コードがきれいだろうが汚かろうが気にしない。しかし、人間はコードがクリーンかどうかに左右されるのだ。 by リファクタリング：Rubyエディション
 url: http://amzn.to/audtNq
2:
 contents: 車輪の再発明：車輪の再発明は、車輪を題材にした慣用句であり、世界中で使われている。「広く受け入れられ確立した技術や解決法を無視して、同様のものを再び一から作ってしまうこと」を意味する。 
 url: http://bit.ly/c7ivrk 
3:
 contents: 言い出しっぺの法則：オープンソース界隈ではよく言われる。「欲しいものは、欲しいと言い出した人が自分で作るべき」という考え方です。それを本当にほしいと思う人が、作るモチベーションが一番高いことは間違いありません。 
 url: http://bit.ly/aE6qt4
4:
 contents: 機能を追加しやすい構造になっていないプログラムに機能を追加しなければならなくなったら、まずプログラムをリファクタリングして作業をしやすくしてから追加すること by リファクタリング：Rubyエディション
 url: http://amzn.to/audtNq
5:
 contents: リファクタリングするとき、最初の一歩はいつも同じだ。その部分のコードのためにしっかりとしたテストセットを作ることである。テストはとても大切だ by リファクタリング：Rubyエディション 
 url: http://amzn.to/audtNq
6:
 contents: リファクタリングでは、テストは命綱になる by リファクタリング：Rubyエディション 
 url: http://amzn.to/audtNq
7:
 contents: リファクタリングを始める前に、しっかりとしたテストスイートを用意しよう。テストは自己診断テストでなければならない。by リファクタリング：Rubyエディション 
 url: http://amzn.to/audtNq
8:
 contents: テストで大切なことは、どんなに小さなものでも、変更を加えた後には必ずテストを実行し、しくじったときに問題点を見つけるためにあちこちを見なくても済むようにすることである by リファクタリング：Rubyエディション 
 url: http://amzn.to/audtNq
9:
 contents: リファクタリングでは、プログラムを少しずつ変更すること。そうすれば、間違えても簡単にバグを見つけられる by リファクタリング：Rubyエディション 
 url: http://amzn.to/audtNq
10:
 contents: コンピュータが理解できるコードは誰でも書ける。優れたプログラマが書くのは、人間が理解できるコードだ by リファクタリング：Rubyエディション 
 url: http://amzn.to/audtNq
11:
 contents: ラバーダッキング：物に話しかけるというこのテクニック
 url: http://bit.ly/bb7qkt
12:
 contents: プログラマーの三大美徳「怠慢（たいまん）」「短気（たんき）」「傲慢（ごうまん）」
 url: http://bit.ly/9Is9i2 http://bit.ly/diPVH6 http://bit.ly/9ZFo53
13:
 contents: 可読性：アメリカでのベストセラー作家のほとんどが、中学1年レベルに合わせて文章を書いている。専門家は、法律や 医療に関する情報を中学1年レベルに合わせて書くことを推奨している  
 url: http://htn.to/9jRqKt
14:
 contents: 物に話しかけるテクニック「ラバーダッキング」  
 url: http://bit.ly/bb7qkt
15:
 contents: ブルックスの法則 - 「遅れているソフトウェアプロジェクトへの要員追加 はさらに遅らせるだけだ」 
 url: http://bit.ly/pthMg
16:
 contents: 簡潔さは力なり - まつもとひろゆきコードの世界
 url: http://amzn.to/bUdduX
17:
 contents: DRYは特にコンピューティングの領域において、重複を防ぐ考え方である。この哲学は、情報の重複は変更の困難さを増大し透明性を減少させ、不一致を生じる可能性につながるため、重複するべきでないことを強調する
 url: http://bit.ly/9XwAJH
18:
 contents: Write Less Code 
 url: 　
19:
 contents: Make it fun!
 url: 　
20:
 contents: Build great software with small teams of happy programmers 
 url: 　
21:
 contents: KISSの原則 - Keep it simple, stupid（シンプルにしておけ！この間抜け）という経験的な原則 
 url: http://amzn.to/audtNq
22:
 contents: マーフィーの法則 - 「落としたトーストがバターを塗った面を下にして着地する確率は、カーペットの値段に比例数する」をはじめとする、先達の経験から生じた数々のユーモラスでしかも哀愁に富む経験則をまとめたものである
 url: 　
23:
 contents: ムーアの法則 - 最小部品コストに関連する集積回路におけるトランジスタの集積密度は、18〜24か月ごとに倍になる、という経験則である 
 url: 　
24:
 contents: フェルミ推定 - 実際に調査するのが難しいようなとらえどころのない量を、いくつかの手掛かりを元に論理的に推論し、短時間で概算すること。フェルミ問題と呼ぶことがある。 
 url: 　
25:
 contents: 行き詰ったときにそこの背景にある理論に立ち戻る 
 url: http://bit.ly/aG3gjn
26:
 contents: 可視化 - 間が直接「見る」ことのできない現象や事象、あるいは関係性を、「見る」ことのできるもの(画像、映像、グラフ、図、表など)にすることをいう
 url: http://bit.ly/ckxFze
27:
 contents: CoC（設定より規約）- 設定より規約とは、開発者の決定すべきことを減少させ、単純にするが柔軟性は失わせないというソフトウェア設計パラダイム
 url: http://bit.ly/9VY9lu
28:
 contents: DSL（ドメイン固有言語） - ドメイン固有言語（Domain-Specific Language、DSL）とは、特定のタスク向けに設計されたプログラミング言語を意味する
 url: http://bit.ly/9kEVjI 
29:
 contents: デザインパターン (ソフトウェア) (GoFによる23のパターン) 
 url: http://bit.ly/9x697T 
30:
 contents: Active Record（アクティブ・レコード）とは、プログラミングにおいて、企業アプリケーションで頻繁に認められるデザインパターンである 
 url: http://bit.ly/ax0u59
31:
 contents: スクラムは、ソフトウェア開発における軽量なアジャイルソフトウェア開発手法の1つである
 url: http://bit.ly/biPuEx
32:
 contents: MVC（Model View Controller）
 url: http://bit.ly/cP8BkL
33:
 contents: アジャイルソフトウェア開発は、ソフトウェア工学において迅速かつ適応的にソフトウェア開発を行う軽量な開発手法群の総称である
 url: http://bit.ly/dpRxWy 
34:
 contents: オブジェクト指向とは、オブジェクト同士の相互作用としてシステムの振る舞いをとらえる考え方である。英語の object-oriented (直訳は、「対象物志向の」・「目的重視の」という意味の形容詞) の日本語訳である 
 url: http://bit.ly/9gcqBb 
35:
 contents: 統一モデリング言語は、ソフトウェア工学におけるオブジェクトモデリングのために標準化した仕様記述言語である 
 url: http://bit.ly/aRjASn 
36:
 contents: エクストリーム・プログラミング(Extreme Programming, XP)は、ケント・ベックらによって定式化され、提唱されているソフトウェア開発手法であり、特にビジネス上の要求が刻々と変わるような状況に向いた開発手法である 
 url: http://bit.ly/a2SFkw 
37:
 contents: コードレビューは、ソフトウェア開発工程で見過ごされた誤りを検出・修正するためにソースコードの体系的な検査（査読）を行うこと。ソフトウェア品質を高めると同時に開発スキルの向上を図ることができる
 url: http://bit.ly/cVRwT3 
38:
 contents: ペアプログラミングは、2人のプログラマが1台のワークステーションを使って共同でソフトウェア開発を行う手法である。一方が単体テストを打ち込んでいるときに、もう一方がそのテストを通るクラスについて考えるといったように、相補的な作業をする 
 url: --
39:
 contents: TDDでは、テストと実装両方に自信がある時は「明白な実装」、一歩一歩進めたい、つまりテストをテストして、そのあとで実装をテストしたい時は「仮実装」と「三角測量」の組み合わせを使います
 url: http://bit.ly/bikpsD 
40:
 contents: 驚き最小の原則とは、ユーザインタフェースやプログラミング言語の設計および人間工学において、インタフェースの2つの要素が互いに矛盾あるいは不明瞭だったときに、その動作としては人間の ユーザやプログラマが最も自然に思える（驚きが少ない）ものを選択すべきだとする考え方である 
 url: 　
41:
 contents: O(n)問題 - 特定のレコードを見つけ出すのに必要な処理も増えてしまう。コンピュータ科学では、これをO(n)問題と呼んでいる
 url: http://amzn.to/a8culn
42:
 contents: Web Document 構文チェック。W3C にツールがある。 
 url: http://validator.w3.org/
43:
 contents: Opinionated Software（"こだわりのある"ソフトウェア） - Railsがそれである。フレームワークに乗っていれば楽ができるよという思想のソフトウエアである
 url: http://bit.ly/dA0Wu7 
44:
 contents: Restful - FieldingのREST原則に従うシステムは、しばしばRESTfulといわれる。RESTをとても熱心に支持する人々は自らのことをRESTafarians（レスタファリアン）と呼ぶ 
 url: http://bit.ly/9GUboS
45:
 contents: テスト駆動開発とは、プログラム開発手法の一種で、プログラム本体よりも先にテストケースを書くスタイルである。このスタイルをテストファーストともいう。多くのアジャイルソフトウェア開発手法。近年はビヘイビア駆動開発へと発展を遂げている 
 url: http://bit.ly/czPno0 
46:
 contents: メタプログラミングとはプログラミング技法の一種で、ロジックを直接コーディングするのではなく、あるパターンをもったロジックを生成する高位ロジックによってプログラミングを行う方法、またその高位ロジックを定義する方法のこと 
 url: http://bit.ly/ctqOmF 
47:
 contents: フルスタック - UIやDB、セキュリティなどの基本的な問題領域にAll in oneな環境を提供するもの 
 url: http://bit.ly/caEjdu
48:
 contents: 関係データベースは関係モデル（リレーショナルデータモデル）にもとづいて設計（データベース設計）、開発されるデータベースである。例えば、MySQLやPostgreSQLです。
 url: http://bit.ly/9eCx7u 
50:
 contents: カオス理論は、決定論的な動的システムの一部に見られる、予測できない複雑な様子を示す現象を扱う理論である。カオス力学ともいう。 
 url: http://bit.ly/92ziis
51:
 contents: 複雑という敵：
 url: ソフトウエアの最大の的は複雑さです。人間の脳はあまり複雑なものを扱うことが出きないのです。記憶力と理解力に限界があるためです。人間は一度に把握できる概念の数に限界がありますし、複数のことを記憶しようとするとたいていいくつかは忘れてしまいます 
52:
 contents: テストファーストの弊害 
 url: http://bit.ly/d4Idmv
53:
 contents: コンピュータが理解できるコードは誰でも書ける。優れたプログラマが書くのは、人間が理解できるコードだ
 url: http://amzn.to/audtNq
54:
 contents: 感性の高いプログラマは一度に三方を見る - 動作・保守・スピード 
 url: http://bit.ly/cjlgZ6
55:
 contents: プログラマの基礎体力 - コードを読むこと 
 url: http://bit.ly/dvKKz7
56:
 contents: プログラミングを継続する極意 - 1. プログラミング道具をキチンと揃える。 2. プログラミング道具の置き場所を決める。 3. 工夫しながらプログラミングする。 
 url: http://bit.ly/cw9POM 
57:
 contents: 良いプログラマとは、一方通行を渡るときに両側を見るような人である。 
 url: http://bit.ly/9euyEm
58:
 contents: 全てのコンピュータは同じ速度で待つ(waitする)。
 url: http://bit.ly/9euyEm
59:
 contents: 複雑なバグと仕様は一体である。
 url: http://bit.ly/9euyEm
60:
 contents: プログラムとは、データをエラーメッセージに変換するものである。
 url: http://bit.ly/9euyEm
61:
 contents: C言語を使うと自分の足を誤って撃ち抜いてしまうことがある。 C++を使えばそのような間違いを犯しにくくなる。しかし、やってしまったときには足全体が無くなる。
 url: http://bit.ly/9euyEm
62:
 contents: C.O.B.O.L - Completely(完全に) Obsolete(時代遅れで) Boring(つまらない) Old Language.
 url: http://bit.ly/9euyEm
63:
 contents: コンピュータは利口ではない。そう思い込んでいるだけだ。
 url: http://bit.ly/9euyEm
64:
 contents: コンピュータはとても高速にとても正確な間違いをおかす。
 url: http://bit.ly/9euyEm
65:
 contents: アップグレードの定義：古いバグを取り除き、新しいバグを入れること。
 url: http://bit.ly/9euyEm
66:
 contents: コンパイルが通った！出荷してしまえ！
 url: http://bit.ly/9euyEm
67:
 contents: プログラマを管理することは、猫の群れを牧畜するようなものだ。
 url: http://bit.ly/9euyEm
68:
 contents: 私のソフトウェアにはバグが無い。その場に応じてランダムな仕様が生み出されるだけだ。
 url: http://bit.ly/9euyEm
69:
 contents: 金曜日か月曜日に書かれたコードを実行してはいけない。
 url: http://bit.ly/9euyEm
70:
 contents: 人間は間違いを犯すものだ。。。間違いをコンピュータのせいにするのはもっと人間的だ。むしろ自然だ。
 url: http://bit.ly/9euyEm
71:
 contents: Most of you are familiar with the virtues of a programmer. There are three, of course, laziness, impatience, and hubris. 
 url: Larry Wall 
72:
 contents: プログラミング作法とは、すなわち思考の抽象化の作法である。
 url: 中村勇吾 
73:
 contents: 作業は、いつだって予測以上に時間がかかるものだ。ホフスタッターの法則を計算に入れても 
 url: ホフスタッターの法則
74:
 contents: ポステルの法則- 送信するものに関しては厳密に、受信するものに関しては寛容に。
 url: http://bit.ly/94vnFg
75:
 contents: パーキンソンの法則 - 仕事の量は、完成のために与えられた時間をすべて満たすまで膨張する。 
 url: http://bit.ly/94vnFg
76:
 contents: パレートの法則 - 多くの現象では、結果の80％は原因の20％で決まっている。
 url: http://bit.ly/94vnFg
77:
 contents: スタージョンの法則 - どんなものも、その90％はカスである。
 url: http://bit.ly/94vnFg
78:
 contents: コンウェイの法則 - ソフトウェアのどの部分であれ、それを作った組織の構造を反映する
 url: http://bit.ly/94vnFg
79:
 contents: ケルクホフスの法則 - 暗号方式は、秘密鍵以外の全てが公知になったとして、なお安全であるべきである。 
 url: http://bit.ly/94vnFg
80:
 contents: リーナスの法則 - 目玉の数さえ十分あれば、どんなバグも深刻ではない。
 url: http://bit.ly/94vnFg
81:
 contents: リードの法則 - 大きなネットワークの有用性は、特にソーシャルネットワークの場合、ネットワークの大きさとともに指数関数的に増加する。
 url: http://bit.ly/94vnFg
82:
 contents: メトカーフの法則 - ネットワーク理論において、システムの価値はそのシステムのユーザ数の二乗近くに比例する。
 url: http://bit.ly/94vnFg
83:
 contents: ロックの法則 - マイクロプロセッサ製作にかかるコストは、4年ごとに2倍になる。
 url: http://bit.ly/94vnFg
84:
 contents: ヴィルトの法則 - ソフトウェアは、ハードウェアが高速化するより急速に低速化する。
 url: http://bit.ly/94vnFg
85:
 contents: ザウィンスキーの法則 - あらゆるプログラムは、それがメールを読めるところまで拡張しようとする。そこまで拡張できないプログラムは、それができるものにとってかわられる。
 url: http://bit.ly/94vnFg
86:
 contents: フィッツの法則 - 目標に到達するまでの時間は、目標までの距離と目標の大きさに依存する。
 url: http://bit.ly/94vnFg
87:
 contents: ヒックの法則 - 意思決定にかかる時間は、可能な選択肢の数に依存する。
 url: http://bit.ly/94vnFg
88:
 contents: プログラマの仕事はプログラムを読むことである 
 url: http://bit.ly/9ORDuy
89:
 contents: 水の上を歩くのと、仕様からのソフトウエア開発は、簡単だ。・・・両方とも凍っているならの話だが。 
 url: http://bit.ly/arE1Gc
90:
 contents: デバッグ作業は、最初にコードを書くときよりも倍難しい。したがって、自らの知恵を出来る限り振り絞って書いたコードは、その定義上、自分自身でデバック出来ない。
 url: http://bit.ly/arE1Gc
91:
 contents: コーディングは常にこう、心がけるのだ。出来上がったコードを最後にメンテナンスするのが暴力的な精神病者で、そして、君の住所を知っていると。
 url: http://bit.ly/arE1Gc
92:
 contents: 初めの90%のコードは、開発時間の10%を占める。残りの10%のコードは、他の90%の開発時間を占める。
 url: http://bit.ly/arE1Gc
93:
 contents: この世には、2種類のプログラミング言語しかない。皆が常に不平を言う言語と、誰も使わない言語。 
 url: http://bit.ly/arE1Gc
94:
 contents: プログラマーの困った点は、手遅れになるまで、何をしているか、けして分からないことだ。 
 url: http://bit.ly/arE1Gc
95:
 contents: うまく行かなくても気にするな。全部うまく言ったら、君の仕事はなくなるのだから。 
 url: http://bit.ly/arE1Gc
96:
 contents: まずトラブルを解決し、それからコードを書け。
 url: http://bit.ly/arE1Gc
97:
 contents: 繰り返し処理は人の技。再帰的呼び出しは神の業。
 url: http://bit.ly/arE1Gc
98:
 contents: 下手なプログラムの作成を防げるプログラミング言語は存在しない。たとえどんなに構造化されていても。
 url: http://bit.ly/arE1Gc
99:
 contents: C言語やC++で書くと言う事は、まるで、全ての安全装置が取り外されたチェーンソーで作り上げるようなものだ。
 url: http://bit.ly/arE1Gc
100:
 contents: 優れたコードは、コード自身が最良のドキュメントとなっている。
 url: http://bit.ly/arE1Gc
101:
 contents: 素晴らしいチームなしに、素晴らしいソフトウェアは生み出せない。そして、大部分の開発チームは機能不全の家族のように振舞う。
 url: http://bit.ly/arE1Gc
102:
 contents: デバッグ作業が、バグを取り除く過程であるならば、プログラミングとは、バグを入れ込む過程でないとおかしい。
 url: http://bit.ly/arE1Gc
103:
 contents: But what is it good for?
 url: http://bit.ly/arE1Gc
104:
 contents: 一番だましやすいのは自分自身である 
 url: http://bit.ly/bz540R
105:
 contents: 人を疑う前に、お前を疑え - チームプログラミング
 url: http://bit.ly/bz540R 
106:
 contents: 電気は嘘をつかない。
 url: http://bit.ly/bz540R
107:
 contents: ３度自分のソースを見直してから他人に文句を言え 
 url: http://bit.ly/bz540R
108:
 contents: ソフトウェア開発に終わりはない。リリースがあるだけだ。
 url: http://bit.ly/bz540R
109:
 contents: 人のバグ見て我がソース直せ
 url: http://bit.ly/bz540R
110:
 contents: 自分のコードも１年経てば他人のコード 
 url: http://bit.ly/bz540R
111:
 contents: 聞くは一時の恥。 聞かぬは一生のバグ。 
 url: http://bit.ly/bz540R
112:
 contents: バグの出ない一番有効な方法はプログラムを書かないこと
 url: http://bit.ly/bz540R
113:
 contents: バグは現象ではなく原因を直せ
 url: http://bit.ly/bz540R
114:
 contents: 楽をするための苦労は惜しむな。
 url: http://bit.ly/bz540R
115:
 contents: ソースは嘘をつかない 
 url: http://bit.ly/bz540R
116:
 contents: ほんとうにいいプログラムは、ずっと生き残るでしょうね　少なくともハードウェアがある限りは　いやたぶん、その後までも残るでしょう 
 url: http://bit.ly/bkNLBF
117:
 contents: 未来を予測する最善の方法は、それを発明することだ 
 url: アラン・ケイ
118:
 contents: テクノロジーというのはあなたが生まれたときに存在しなかった全てのものだ
 url: アラン・ケイ
119:
 contents: うまく説明できないものは、本質的に優れていない。優しいものが優れている
 url: 山本和彦
120:
 contents: 過去を記録しない者はそれを再入力するはめになるのだ
 url: Goege Sant
121:
 contents: 何を書けばいいのか分かっているのが、良いプログラマ。何を書き直せばいいのか分かっているのが、凄いプログラマ。
 url: Eric S. Raymond
122:
 contents: 賢いデータ構造と間抜けなコードの方が、 その逆よりずっとましである。
 url: Eric S. Raymond
123:
 contents: デバッグは並列処理可能である。 
 url: Jeff Dutky
124:
 contents: 良い名前を付けることは、訓練を必要とするスキルです。このスキルを伸ばすことが、本当に熟練したプログラマとなるために重要です。 
 url: 柴田芳樹
125:
 contents: 測ることは知ることだ 
 url: James Clerk Maxwell
126:
 contents: たいていのソフトウエア技術者は、予定を達成するために残業するんじゃなくて、達成できないことをやましく感じないように残業している。  
 url: デマルコ 大いに語る
127:
 contents: プロジェクト・リーダーの主たる業務は、適切な人が適切なときに適切な意思決定をするようにしむけることである。リーダーがすべてを決定する人になってはいけない。 
 url: デマルコ 大いに語る
128:
 contents: 測定できない事柄を、コントロールするわけには行かない。
 url: ソフトウェア開発プロジェクト技法
129:
 contents: 許しがたい唯一の怠慢は、過去の失敗から学ぶのを怠ることである。 
 url: ソフトウェア開発プロジェクト技法
130:
 contents: 予防は治療に勝る。つまり1回の予防は何回もの治療に値する。
 url: ソフトウェアインスペクション
131:
 contents: rsyncを逆にやって消えた
 url: http://bit.ly/dokcJi 
132:
 contents: make & make sense 分かってからやるではなくて、やってから分かる。
 url: http://bit.ly/dokcJi
133:
 contents: 「包括的なドキュメントよりも動くソフトウエアを重視する」※ドキュメントがないほうがいいという概念とはまったっく違う 
 url: http://bit.ly/8Z67Yf
134:
 contents: クックパッドものづくり３分割「無言実行」「無言語化」「サービスには値段をつける」  
 url: http://bit.ly/8Z67Yf
135:
 contents: 「なぜRubyを開発したのか」=> 「それが僕には楽しかったから」
 url: まつもとひろゆきコードの世界 http://amzn.to/bUdduX
136:
 contents: 「良いプログラミング言語」を選択することによって、人は「良いプログラマ」になることができる 
 url: まつもとひろゆきコードの世界 http://amzn.to/bUdduX
137:
 contents: プログラミングとはアルゴリズム+データ構造である 
 url: Niklaus Wirth
138:
 contents: Duck Typing 
 url: あるオブジェクトがどのクラスに所属するかは一切考慮せず、どのように振舞うか（どのようなメソッドを持つか）だけに関心を払うのがDuck Typing です。西洋の格言に由来します。「アヒルのように歩き、アヒルのように鳴くものはアヒルに違いない」
139:
 contents: 世間での理解とは異なり、プログラミングは文系的要素の多い領域です。しかし、パフォーマンス・チューニングに関しては、バリバリの理系領域です 
 url: by まつもとゆきひろコードの世界
140:
 contents: より多くのデータはよりよいアルゴリズムを凌駕する 
 url: by 書籍：Hadoop 
141:
 contents: シェアードナッシング設計とは分散コンピューティングにおいて、各ノード（コンピュータ）がネットワークを除いてリソースを共有しておらず、それぞれが独立しており、自律的であり、システムにおいて単一競合箇所が無い物を指す
 url: http://bit.ly/9TnAp2
142:
 contents: グリッド・コンピューティングは、インターネットなどの広域のネットワーク上にある計算資源（CPUなどの計算能力や、ハードディスクなどの情報格納領域）を結びつけ、ひとつの複合したコンピュータシステムとしてサービスを提供する仕組みである 
 url: http://bit.ly/bl0fQ8
143:
 contents: オーバーフロー：コンピュータが数値演算を行なった結果が、扱える数値の最大値を超えること。たとえば動画のアップロードで制限をかけていなければ、何百GBの動画をアップロードされHDDがいっぱいになってしまうなど。
 url: 　 
144:
 contents: OSコマンドインジェクション：Webアプリケーションによっては、外部からの攻撃により、WebサーバのOSコマンドを不正に実行されてしまう問題を持つものがあります。この問題を悪用した攻撃手法は、一般に「OSコマンド・インジェクション」と呼ばれています。
 url: 　
145:
 contents: パス・トラバーサル：開発者の意図に反して、他のディレクトリパスやファイルにアクセスする攻撃。攻撃例：パラメータに絶対パスや相対パスで別ディレクトリファイルを指定　http://example/foo.cgi?file=../../../etc/passwd
 url: 　
146:
 contents: SQLインジェクション：アプリケーションのセキュリティ上の不備を意図的に利用し、アプリケーションが想定しないSQL文を実行させることにより、データベースシステムを不正に操作する攻撃方法のこと。また、その攻撃を可能とする脆弱性のこと。
 url: 　
147:
 contents: パスワード推測：パスワードは重要です。ポリシーを作成し、厳重に作成・管理しましょう。http://bit.ly/95yIRs
 url: 　
148:
 contents: クロスサイト・スクリプティング（XSS）：動的にWebページを生成するアプリケーションのセキュリティ上の不備を意図的に利用し、狭義にはサイト間を横断して悪意のあるスクリプトを混入させること。また、それを許す脆弱性のこと。http://bit.ly/aRATmu
 url: 　
149:
 contents: セッションハイジャック：セッションを管理するセッションIDやセッション・クッキーを盗むことにより、悪意の者が、別のユーザーになりすまし、そのユーザーが使用するマシンとは別のコンピューターからインターネットにアクセスするという不正アクセスの手口、またはそうした危険性そのものを指す。
 url: 　
150:
 contents: Cross Site Request Forgeries：CSRF：Webサイトにスクリプトや自動転送(HTTPリダイレクト)を仕込むことによって、閲覧者に意図せず別のWebサイト上で何らかの操作(掲示板への書き込みなど)を行なわせる攻撃手法
 url: 　
151:
 contents: コルモゴロフ複雑性とは、計算機科学において有限長のデータ列の複雑さを表す指標のひとつで、出力結果がそのデータに一致するプログラムの長さの最小値として定義される。コルモゴロフ複雑度、コルモゴロフ＝チャイティン複雑性とも呼ばれる。 
 url: http://bit.ly/aO0tTo
152:
 contents: クワイン（英： Quine）は、コンピュータプログラムにおけるメタプログラミングの一形態であり、自身の完全なソースコードだけを出力するプログラムである。娯楽として、プログラマが任意のプログラミング言語での最短クワインを書くことがある。 
 url: http://bit.ly/9RHxeO
153:
 contents: 君は大きな投資をしようとしている。投資しようとしているのはお金ではなく、君の時間、つまり君の人生だ
 url: by 情熱プログラマー
154:
 contents: 偶発的プログラミング：あるコードからはじめて、あちこちに少しずつコードを書き加えていくやり方 
 url: by 情熱プログラマー
155:
 contents: 万能選手になり、スペシャリストにもなろう。医者を想像すると分かりやすい。内臓のことは知っているが脳のことをまったく知らない医者が手術をしたらどうなる？命を奪ってしまうかもしれない。 
 url: by 情熱プログラマー
156:
 contents: とにかくやれ。やれないはずはない。 
 url: by 情熱プログラマー
157:
 contents: 教えてくれるのを待つな。自分から訊け！
 url: by 情熱プログラマー
158:
 contents: 心の師匠を探そう
 url: by 情熱プログラマー
159:
 contents: 誰かに教えてみれば、自分が本当に分かっているか否かはっきりする 
 url: by 情熱プログラマー
160:
 contents: 本当の意味で何かを習得しようと思ったら、誰かに教えてみることをお勧めする。自分の理解をはっきりとした形にする一番の方法は、自分の言葉を使って、他の人にも分かるように説明することだ。 
 url: by 情熱プログラマー
161:
 contents: 一に練習、二に練習：開発環境に用意されている数々のツールを自由に弾けないと、本当に役立つ場面でツールを使えない。
 url: by 情熱プログラマー
162:
 contents: 「ソフトウエア開発」は物じゃない、つまり名詞ではない。まぎれもなく動詞だ。物を作成するプロセスだ。開発している製品と同じくらい、そのプロセスにも注目する必要がある。 
 url: by 情熱プログラマー
163:
 contents: プロセスを身につけたいなら実践しろ
 url: by 情熱プログラマー
164:
 contents: 既存のコードを掘り起こせ：過去に発表された数々のコードから有益なパターンやトリックを掘り起こせる
 url: by 情熱プログラマー
165:
 contents: 他人のコードを通じて、自分の力を思い知れ
 url: by 情熱プログラマー
166:
 contents: 自動化によって自分の仕事を確保する
 url: by 情熱プログラマー
167:
 contents: 今すぐできることはなんだろう？を口癖にしよう 
 url: by 情熱プログラマー
168:
 contents: 良いマネージャの役割は、チームの仕事に優先順位を設定し、チームが仕事をこなすために必要なものを用意し、チームがやる気と生産性を維持できるように配慮し、最終的に要求を実現することにある
 url: by 情熱プログラマー
170:
 contents: 本当に出来ないときに臆せずに「できません」と言える強さを持ったチームメンバーがいれば、彼らの「できます」という言葉には偽りがないと確信できる。 
 url: by 情熱プログラマー
171:
 contents: ピカピカのスキルもすぐ時代遅れ
 url: by 情熱プログラマー
172:
 contents: データローカリティは「高速化」と「ネットワーク帯域の節約」のため大切
 url: by Hadoop
173:
 contents: ネットワークの帯域がデータセンターの環境における最も貴重な資源である 
 url: by Hadoop
174:
 contents: ボランティア・コンピューティング とは、
 url: ボランティア・コンピューティング とは、計算に用いる資源を提供する人々(ボランティア)と、その資源の提供を受けるプロジェクト との間の協定であり、プロジェクトは提供を受けた資源を使って、分散コンピューティングあるいは分散ストレージを実施するというもの
175:
 contents: グロビングとはパターンマッチによるファイル指定のこと 
 url: http://bit.ly/dlDNUt
176:
 contents: 投機的実行は、コンピュータが実際にはその結果を捨ててしまうかもしれないコードを実行することである。 
 url: http://bit.ly/dgFHTT
177:
 contents: 評価戦略：評価戦略は、プログラミング言語における式の評価を決定する（通常決定的な）規則群を意味する。
 url: http://bit.ly/aQAVbw
178:
 contents: 正格な評価とは、関数の引数が常にその関数に引き渡される前に完全に評価されることを意味する。チャーチ符号化においては、演算子の先行評価は関数の正格な評価に写像される。そのため、正格な評価は「先行評価」とも呼ばれる。
 url: http://bit.ly/aQAVbw
179:
 contents: 適用順序価とは、関数の引数を左から右に後順に走査して簡約可能な式を簡約していく評価戦略である。値渡しとは異なり、適用順序評価は関数を実際に適用する以前に可能な限り関数本体内の項数を減らそうとする。 
 url: http://bit.ly/aQAVbw
180:
 contents: 値渡し評価は、C言語からSchemeまで多くの言語で採用されている典型的な評価戦略である。値渡しでは、引数の式を評価し、結果として得られた値で関数内の対応する変数を束縛する（通常、捕獲回避置換か新たなメモリ領域への値のコピーをする） 
 url: http://bit.ly/aQAVbw
181:
 contents: 参照渡し価とは、関数に対して引数の値そのものではなく、引数の参照を暗黙のうちに渡すことをいう 
 url: http://bit.ly/aQAVbw
183:
 contents: 遅延評価を行う利点は計算量の最適化である 
 url: http://bit.ly/aQAVbw
184:
 contents: MIPSアーキテクチャはミップス・コンピュータシステムズおよびミップス・テクノロジーズが開発したRISCマイクロプロセッサのアーキテクチャである 
 url: http://bit.ly/cyo2p6
185:
 contents: 信頼性設計とは、工学分野において、システム・装置または部品が使用開始から寿命を迎えるまでの期間を通して、予め期待した機能を果たせるように、すなわち故障や性能の劣化が発生しないように考慮して設計する手法のこと
 url: http://bit.ly/bfE6nz
186:
 contents: フェイルセーフ設計とは、機械は必ず故障が発生するということを念頭に置き、故障が発生した場合にも、常に安全側にその機能が作用する設計思想
 url: http://bit.ly/bfE6nz
187:
 contents: フールプルーフとは、間違った操作方法でも事故が起こらないようにする安全設計のこと 
 url: http://bit.ly/bfE6nz
188:
 contents: 冗長性設計：設計の世界において2重に対策化をこうじておき、システム全体の信頼性を増加させる手法を冗長性という
 url: http://bit.ly/bfE6nz
189:
 contents: ボンディングとは、1台のマシンに複数のNICを搭載し，それらのNICを一つの仮想的なNICとして扱うための技術。ネットワークの負荷を分散させたり，スループットや信頼性を向上させたりする場合に用いられます 
 url: http://bit.ly/dDaPQ4
190:
 contents: 
 url: 
191:
 contents: 
 url: 
192:
 contents: 
 url: 
193:
 contents: 
 url: 
194:
 contents: 
 url: 
195:
 contents: 
 url: 
196:
 contents: 
 url: 
197:
 contents: 
 url: 
198:
 contents: 
 url: 
199:
 contents: 
 url: 
200:
 contents: 
 url: 
201:
 contents: 
 url: 
202:
 contents: 
 url: 
